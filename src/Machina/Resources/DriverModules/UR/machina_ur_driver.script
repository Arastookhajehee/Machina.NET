# A Universal Robot driver script to allow control from TCP socket.
# Works with SW3.0 and above (?)
# https://github.com/RobotExMachina

def machina_ur_driver():
  # Useful for handshakes and version compatibility checks...
  MACHINA_DRIVER_VERSION = "1.2.0"

  # Data of the TCP socket for communication
  HOSTNAME = "{{HOSTNAME}}"         # to be replaced with the driving device's IP (probably your computer) prior to uploading to controller
  PORT = {{PORT}}                   # idem


  # CONSTANTS ------------------------------------------------------------

  # Instruction data will be sent to the socket in the form of 32 signed integers.
  # To allow for float precision, the original values must be 'puffed' by these factors.
  # This works de facto as the maximum precision for unit value types.
  FACTOR_M = 10000.0
  FACTOR_RAD = 10000.0
  FACTOR_SEC = 1000.0
  FACTOR_KG = 1000.0
  FACTOR_VOLT = 1000000.0

  # Instruction codes.
  # Instruction buffers start with an ID that will be sent back on the acknowledgement response (use -1 if not interested),
  # then a numeric code which determines the instruction to perform, and variable number of parameters for the instruction.
  # Please note that, with the exception of strings (WIP), all parameters must be integers that have been premultiplied by
  # their corresponding unit factor (see above).
                                    # INCOMING BUFFER:
  INST_MOVEL = 1                    # [ID, CODE, X, Y, Z, RX, RY, RZ] (in (int) M * FACTOR_M, RAD * FACTOR_RAD)
  INST_MOVEJ_P = 2                  # [ID, CODE, X, Y, Z, RX, RY, RZ] (in (int) M * FACTOR_M, RAD * FACTOR_RAD)
  INST_MOVEJ_Q = 3                  # [ID, CODE, J1, J2, J3, J4, J5, J6] (in (int) RAD * FACTOR_RAD)
  INST_TCP_SPEED = 4                # [ID, CODE, VEL] (in (int) M/S * FACTOR_M)
  INST_TCP_ACC = 5                  # [ID, CODE, ACC] (in (int) M/S^2 * FACTOR_M)
  INST_Q_SPEED = 6                  # [ID, CODE, VEL] (in (int) RAD/S * FACTOR_RAD)
  INST_Q_ACC = 7                    # [ID, CODE, ACC] (in (int) RAD/S^2 * FACTOR_RAD)
  INST_BLEND = 8                    # [ID, CODE, RADIUS] (in (int) M * FACTOR_M)
  INST_SLEEP = 9                    # [ID, CODE, TIME] (in (int) S * FACTOR_SEC)
#   INST_TEXTMSG = 10                 # [ID, CODE, MSG] (in (string) "msg" + STR_MESSAGE_END_CHAR) (NOT IMPLEMENTED)
#   INST_POPUP = 11                   # [ID, CODE, MSG] (in (string) "msg" + STR_MESSAGE_END_CHAR) (NOT IMPLEMENTED)
  INST_SET_TOOL = 12                # [ID, CODE, X, Y, Z, RX, RY, RZ, KG] (in (int) M * FACTOR_M, RAD * FACTOR_RAD, KG * FACTOR_KG)
  INST_SET_DIGITAL_OUT = 13         # [ID, CODE, PIN, ON, TOOL] (in (int), bool)
  INST_SET_ANALOG_OUT = 14          # [ID, CODE, PIN, VOLTAGE] (in (int) VOLTAGE * FACTOR_VOLT) (there is no analog out on the tool)
  # This value sets the same speed value for TCP and Q, taken as mm/s and deg/s. E.g: if setting to 20 mm/s or deg/s, the received value should be 0.02 m/s * FACTOR_M, and this will be converted internally to 0.349 rad/s (=20 deg/s)
  INST_ALL_SPEED = 15               # [ID, CODE, VEL] (in (int) M/S * FACTOR_M)
  # Similarly here, a received value in "puffed" m/s^2 will be internally translated to rad/s^2
  INST_ALL_ACC = 16                 # [ID, CODE, ACC] (in (int) M/S^2 * FACTOR_M)
  INST_MOVEP = 17                   # [ID, CODE, X, Y, Z, RX, RY, RZ] (in (int) M * FACTOR_M, RAD * FACTOR_RAD)

  # custom code by Arastoo for Onrobot Gripper RG7
  INST_ONROBOT_RG6 = 27
  INST_ONROBOT_ScrewDriverShank = 28
  INST_ONROBOT_ScrewDriverTighten = 29
  INST_ONROBOT_ScrewDriverLoosen = 30
  INST_ONROBOT_ScrewDriverPremount = 31
  INST_ONROBOT_ScrewDriverPickScrew = 32
  INST_ONROBOT_VG10ChannelGrip = 33
  INST_ONROBOT_VG10ChannelGripAll = 34
  INST_ONROBOT_VG10Release = 35

  # BTU Gripper Code

  gripper_openTcp = p[0, 0, 0.24667, 0, 0, 1.5708]
  gripper_openWeight = 0.5
  gripper_openCog = [0, 0, 0.24667]
  gripper_closedTcp = p[0, 0, 0.24667, 0, 0, 1.5708]
  gripper_closedWeight = 0.5
  gripper_closedCog = [0, 0, 0.24667]
  SetAO000 = 0.02
  set_analog_out(0, SetAO000)
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.9.0, OnRobot A/S
  #   Type: RG Configuration
  global measure_width = 0
  global grip_detected = False
  global lost_grip = False
  global zsysx = 0
  global zsysy = 0
  global zsysz = 0.10205
  global zsysm = 1.085
  global zmasx = -0
  global zmasy = -0
  global zmasz = 0.23434
  global zmasm = 0
  global zmasm = 0
  global zslax = 0
  global zslay = 0
  global zslaz = 0
  global zslam = 0
  global zslam = 0
  thread lost_grip_thread():
    while True:
      set_tool_voltage(24)
      if True == get_digital_in(9):
        sleep(0.024)
        if True == grip_detected:
          if False == get_digital_in(8):
            grip_detected = False
            lost_grip = True
          end
        end
        set_tool_analog_input_domain(0, 1)
        set_tool_analog_input_domain(1, 1)
        zscale = (get_analog_in(2)-0.026) / 2.9760034
        zangle = zscale * 1.57079633 + -0.09424778
        zwidth = 8.4 + 160 * sin(zangle)
        global measure_width = (floor(zwidth * 10)) / 10-9.2
      end
      sync()
    end
  end
  lg_thr = run lost_grip_thread()
  def RG6(target_width = 160, target_force = 120, payload = 0.0, set_payload = False, depth_compensation = False, slave = False):
    grip_detected = False
    if slave:
      slave_grip_detected = False
    else:
      master_grip_detected = False
    end
    timeout = 0
    timeout_limit = 1250000
    while get_digital_in(9) == False:
      if timeout > timeout_limit:
        break
      end
      timeout = timeout + 1
      sync()
    end
    def bit(input):
      msb = 65536
      local i = 0
      local output = 0
      while i < 17:
        set_digital_out(8, True)
        if input >= msb:
          input = input - msb
          set_digital_out(9, False)
        else:
          set_digital_out(9, True)
        end
        if get_digital_in(8):
          out = 1
        end
        sync()
        set_digital_out(8, False)
        sync()
        input = input * 2
        output = output * 2
        i = i + 1
      end
      return output
    end
    target_width = target_width + 9.2
    if target_force > 120:
      target_force = 120
    end
    if target_force < 25:
      target_force = 25
    end
    if target_width > 160:
      target_width = 160
    end
    if target_width < 0:
      target_width = 0
    end
    rg_data = floor(target_width) * 4
    rg_data = rg_data + floor(target_force / 5) * 4 * 161
    rg_data = rg_data + 32768
    if slave:
      rg_data = rg_data + 16384
    end
    bit(rg_data)
    if depth_compensation:
      finger_length = 80.0 / 1000
      finger_heigth_disp = 6.3 / 1000
      center_displacement = 10.5 / 1000
      start_pose = get_forward_kin()
      set_analog_inputrange(2, 1)
      zscale = (get_analog_in(2)-0.026) / 2.9760034
      zangle = zscale * 1.57079633 + -0.09424778
      zwidth = 8.4 + 160 * sin(zangle)
      start_depth = cos(zangle) * finger_length
      sleep(0.016)
      timeout = 0
      while get_digital_in(9) == True:
        timeout = timeout + 1
        sleep(0.008)
        if timeout > 20:
          break
        end
      end
      timeout = 0
      timeout_limit = 1250000
      while get_digital_in(9) == False:
        zscale = (get_analog_in(2)-0.026) / 2.9760034
        zangle = zscale * 1.57079633 + -0.09424778
        zwidth = 8.4 + 160 * sin(zangle)
        measure_depth = cos(zangle) * finger_length
        compensation_depth = (measure_depth - start_depth)
        target_pose = pose_trans(start_pose, p[0, 0, -compensation_depth, 0, 0, 0])
        if timeout > timeout_limit:
          break
        end
        timeout = timeout + 1
        #  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
        #  textmsg(point_dist(target_pose, get_forward_kin()))
        #end
        #textmsg("end gripper move!!!!!")
        #nspeedthr = 0.001
        #nspeed = norm(get_actual_tcp_speed())
        #while nspeed > nspeedthr:
        #  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
        #  nspeed = norm(get_actual_tcp_speed())
        #  textmsg(point_dist(target_pose, get_forward_kin()))
        #end
        servoj(get_inverse_kin(target_pose), 0, 0, 0.008, 0.01, 2000)
        if point_dist(target_pose, get_forward_kin()) > 0.005:
          popup("Lower grasping force or max width", title = "RG-lag threshold exceeded", warning = False, error = False, blocking = False)
        end
      end
      nspeed = norm(get_actual_tcp_speed())
      while nspeed > 0.001:
        servoj(get_inverse_kin(target_pose), 0, 0, 0.008, 0.01, 2000)
        nspeed = norm(get_actual_tcp_speed())
      end
      stopj(2)
    end
    if depth_compensation == False:
      timeout = 0
      timeout_count = 20 * 0.008 / 0.008
      while get_digital_in(9) == True:
        timeout = timeout + 1
        sync()
        if timeout > timeout_count:
          break
        end
      end
      timeout = 0
      timeout_limit = 1250000
      while get_digital_in(9) == False:
        timeout = timeout + 1
        sync()
        if timeout > timeout_limit:
          break
        end
      end
    end
    sleep(0.024)
    if set_payload:
      if slave:
        if get_analog_in(3) < 2:
          zslam = 0
        else:
          zslam = payload
        end
      else:
        if get_digital_in(8) == False:
          zmasm = 0
        else:
          zmasm = payload
        end
      end
      zload = zmasm + zslam + zsysm
      set_payload(zload, [(zsysx * zsysm + zmasx * zmasm + zslax * zslam) / zload, (zsysy * zsysm + zmasy * zmasm + zslay * zslam) / zload, (zsysz * zsysm + zmasz * zmasm + zslaz * zslam) / zload])
    end
    master_grip_detected = False
    master_lost_grip = False
    slave_grip_detected = False
    slave_lost_grip = False
    if True == get_digital_in(8):
      master_grip_detected = True
    end
    if get_analog_in(3) > 2:
      slave_grip_detected = True
    end
    grip_detected = False
    lost_grip = False
    if True == get_digital_in(8):
      grip_detected = True
    end
    zscale = (get_analog_in(2)-0.026) / 2.9760034
    zangle = zscale * 1.57079633 + -0.09424778
    zwidth = 8.4 + 160 * sin(zangle)
    global measure_width = (floor(zwidth * 10)) / 10-9.2
    if slave:
      slave_measure_width = measure_width
    else:
      master_measure_width = measure_width
    end
    return grip_detected
  end
  set_tool_voltage(24)
  set_tcp(p[-0, -0, 0.23435, 0, -0, -3.14159])
  # end: URCap Installation Node
  set_tcp(gripper_openTcp)
  set_payload(gripper_openWeight, gripper_openCog)
  # end of BTU Gripper Code

  # # Some conventions for string parsing (NOT IMPLEMENTED, trying to figure out a solution compatible with SW3.0)
  # STR_MESSAGE_END_CHAR = ";"        # Marks the end of a message
  # STR_MESSAGE_CONTINUE_CHAR = ">"   # Marks the end of an unfinished message, to be continued on next message. Useful when the message is too long and needs to be split in chunks
  # STR_MESSAGE_ID_CHAR = "@"         # Flags a message as an acknowledgment message corresponding to a source id
  # STR_MESSAGE_RESPONSE_CHAR = "$"   # Flags a message as a response to an information request (acknowledgments do not include it)

  # RES_VERSION = -50                  # ">50 1 2 0;" Sends version numbers
  # RES_POSE = -51                     # ">51 400 300 500 0 180 0;" Sends pose
  # RES_JOINTS = -52                   # ">52 0 0 0 0 90 0;" Sends joints
  # RES_EXTAX = 53                     #
  RES_FULL_POSE = -54               # ">54 X Y Z RX RY RZ J1 J2 J3 J4 J5 J6;" Sends all pose and joint info
  RES_END = -2147483648             # Used to denote the end of sending messages

  # Other constants
  TAU = 6.2831853                   # = 2 * PI :)
  TO_DEG = 360 / TAU
  TO_RAD = TAU / 360

  # State variables
  state_speed = 0.02
  state_acceleration = 0.2
  state_joint_speed = 0.35
  state_joint_acceleration = 0.7
  state_blend_radius = 0.0          # if not zero, targets with same TCP position (like rotations) won't execute!

  # FUNCTIONS --------------------------------------------------

  # For some reason, functions must have arguments and return somwthing! Otherwise, Machina cannot upload and run them... XD
  # Adding a dummy variable to work around this shit... 
  def send_full_pose(dummy = 0):

    pose = get_actual_tcp_pose()
    q = get_actual_joint_positions()

    socket_send_int(RES_FULL_POSE)
    socket_send_int(FACTOR_M * pose[0])
    socket_send_int(FACTOR_M * pose[1])
    socket_send_int(FACTOR_M * pose[2])
    socket_send_int(FACTOR_RAD * pose[3])
    socket_send_int(FACTOR_RAD * pose[4])
    socket_send_int(FACTOR_RAD * pose[5])
    socket_send_int(FACTOR_RAD * q[0])
    socket_send_int(FACTOR_RAD * q[1])
    socket_send_int(FACTOR_RAD * q[2])
    socket_send_int(FACTOR_RAD * q[3])
    socket_send_int(FACTOR_RAD * q[4])
    socket_send_int(FACTOR_RAD * q[5])
    socket_send_int(RES_END)
    
    return dummy
  end

  #def send_string(message = ""):
  #    socket_open("192.168.1.9", 7005, "socket_1")
  #    socket_send_string(message, "socket_1")
  #    socket_close("socket_1")
  #      return message
  #  end

  # MAIN -------------------------------------------------------
  # Let's go!
  socket_open(HOSTNAME, PORT)
  textmsg("Started Machina driver")

  send_full_pose()

  # Main buffer reading and instructing loop (TODO: implement theaded buffer reading, if only URScript had some array management options... :()
  while True:
    header = socket_read_binary_integer(2)
    
    if header[0] == 0:
      # timeout, do nothing

    elif header[0] != 2:
      textmsg("Incorrectly formatted buffer:", header)

    else:
      textmsg("Received action request: ", header)
      action_id = header[1]
      action_code = header[2]
      # textmsg("Action ", action_code)

      if action_code == INST_MOVEL:
        params6 = socket_read_binary_integer(6)
        pose = p[params6[1] / FACTOR_M, params6[2] / FACTOR_M, params6[3] / FACTOR_M, params6[4] / FACTOR_RAD, params6[5] / FACTOR_RAD, params6[6] / FACTOR_RAD]
        movel(pose, state_acceleration, state_speed, 0, state_blend_radius)
        ### WARNING: I just changed this temporarily to `movep` for Merritt's project, must reverted on main code --> Add as a new `MotionMode`?
        # movep(pose, state_acceleration, state_speed, state_blend_radius)

      # This motion maintains linear speed and does radius blending
      # However, for motion between targets with same TCP **position** (like a relative rotation), 
      # it won't perform the motion because of blending proximity (SW3.0)...  
      # Sticking mainly to movel for now.
      elif action_code == INST_MOVEP:
        params6 = socket_read_binary_integer(6)
        pose = p[params6[1] / FACTOR_M, params6[2] / FACTOR_M, params6[3] / FACTOR_M, params6[4] / FACTOR_RAD, params6[5] / FACTOR_RAD, params6[6] / FACTOR_RAD]
        movep(pose, state_acceleration, state_speed, state_blend_radius)

      elif action_code == INST_MOVEJ_P:
        params6 = socket_read_binary_integer(6)
        pose = p[params6[1] / FACTOR_M, params6[2] / FACTOR_M, params6[3] / FACTOR_M, params6[4] / FACTOR_RAD, params6[5] / FACTOR_RAD, params6[6] / FACTOR_RAD]
        movej(pose, state_joint_acceleration, state_joint_speed, 0, state_blend_radius)

      elif action_code == INST_MOVEJ_Q:
        params6 = socket_read_binary_integer(6)
        joints = [params6[1] / FACTOR_RAD, params6[2] / FACTOR_RAD, params6[3] / FACTOR_RAD, params6[4] / FACTOR_RAD, params6[5] / FACTOR_RAD, params6[6] / FACTOR_RAD]
        movej(joints, state_joint_acceleration, state_joint_speed, 0, state_blend_radius)

      elif action_code == INST_TCP_SPEED:
        params1 = socket_read_binary_integer(1)
        state_speed = params1[1] / FACTOR_M

      elif action_code == INST_TCP_ACC:
        params1 = socket_read_binary_integer(1)
        state_acceleration = params1[1] / FACTOR_M

      elif action_code == INST_Q_SPEED:
        params1 = socket_read_binary_integer(1)
        state_joint_speed = params1[1] / FACTOR_RAD

      elif action_code == INST_Q_ACC:
        params1 = socket_read_binary_integer(1)
        state_joint_acceleration = params1[1] / FACTOR_RAD

      elif action_code == INST_BLEND:
        params1 = socket_read_binary_integer(1)
        state_blend_radius = params1[1] / FACTOR_M

      elif action_code == INST_SLEEP:
        params1 = socket_read_binary_integer(1)
        sleep(params1[1] / FACTOR_SEC)

      # Not implemented yet due to SW3.0 limitations in capping string reading
    #   elif action_code == INST_TEXTMSG:
    #   elif action_code == INST_POPUP:

      elif action_code == INST_SET_TOOL:
        params7 = socket_read_binary_integer(7)
        pose = p[params7[1] / FACTOR_M, params7[2] / FACTOR_M, params7[3] / FACTOR_M, params7[4] / FACTOR_RAD, params7[5] / FACTOR_RAD, params7[6] / FACTOR_RAD]
        set_tcp(pose)
        set_payload(params7[7] / FACTOR_KG)

      elif action_code == INST_SET_DIGITAL_OUT:
        params3 = socket_read_binary_integer(3)
        if params3[3] != 0:
          set_tool_digital_out(params3[1], params3[2] != 0)
        else: 
          set_standard_digital_out(params3[1], params3[2] != 0)
        end

      elif action_code == INST_SET_ANALOG_OUT:
        params2 = socket_read_binary_integer(2)
        set_standard_analog_out(params2[1], params2[2] / FACTOR_VOLT)

      elif action_code == INST_ONROBOT_RG6:
        params3 = socket_read_binary_integer(3)
        tool_param_01 = params3[1]
        tool_param_02 = params3[2]
        wait_time = params3[3]

        # distance, payload, inplace/moving
        concat01 = str_cat("RG6^" ,tool_param_01)
        concat02 = str_cat("^" ,tool_param_02)


        seg_01 = str_cat(concat01,concat02)
        final_cat = str_cat(seg_01,"^")

        # socket_send_string(final_cat)
        # replacing send string with the built-in function
        RG6(tool_param_01)

        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_ScrewDriverShank:
        params2 = socket_read_binary_integer(2)
        tool_param_01 = params2[1]
        wait_time = params2[2]

        concat01 = str_cat("SDSHANK^" ,tool_param_01)

        final_cat = str_cat(concat01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_ScrewDriverTighten:
        params3 = socket_read_binary_integer(3)
        tool_param_01 = params3[1]
        tool_param_02 = params3[2]
        wait_time = params3[3]

        # distance, payload, inplace/moving
        concat01 = str_cat("SDTIGHT^" ,tool_param_01)
        concat02 = str_cat("^" ,tool_param_02)

        seg_01 = str_cat(concat01,concat02)
        final_cat = str_cat(seg_01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_ScrewDriverLoosen:
        params2 = socket_read_binary_integer(2)
        tool_param_01 = params2[1]
        wait_time = params2[2]

        concat01 = str_cat("SDLOOSE^" ,tool_param_01)

        final_cat = str_cat(concat01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_ScrewDriverPremount:
        params3 = socket_read_binary_integer(3)
        tool_param_01 = params3[1]
        tool_param_02 = params3[2]
        wait_time = params3[3]

        # distance, payload, inplace/moving
        concat01 = str_cat("SDPREMOUNT^" ,tool_param_01)
        concat02 = str_cat("^" ,tool_param_02)

        seg_01 = str_cat(concat01,concat02)
        final_cat = str_cat(seg_01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_ScrewDriverPickScrew:
        params2 = socket_read_binary_integer(2)
        tool_param_01 = params2[1]
        wait_time = params2[2]

        concat01 = str_cat("SDPICKSCREW^" ,tool_param_01)

        final_cat = str_cat(concat01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_VG10ChannelGrip:
        params4 = socket_read_binary_integer(4)
        tool_param_01 = params4[1]
        tool_param_02 = params4[2]
        tool_param_03 = params4[3]
        wait_time = params4[4]

        
        concat01 = str_cat("VG10CHGRIP^" ,tool_param_01)
        concat02 = str_cat("^" ,tool_param_02)
        concat03 = str_cat("^" ,tool_param_03)

        seg_01 = str_cat(concat01,concat02)
        seg_02 = str_cat(seg_01,concat03)
        final_cat = str_cat(seg_02,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_VG10ChannelGripAll:
        params3 = socket_read_binary_integer(3)
        tool_param_01 = params3[1]
        tool_param_02 = params3[2]
        wait_time = params3[3]

        concat01 = str_cat("VG10GRIPALL^" ,tool_param_01)
        concat02 = str_cat("^" ,tool_param_02)

        seg_01 = str_cat(concat01,concat02)
        final_cat = str_cat(seg_01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ONROBOT_VG10Release:
        params1 = socket_read_binary_integer(1)
        wait_time = params1[1]

        concat01 = str_cat("VG10RELEASE^" ,"^")

        final_cat = str_cat(concat01,"^")

        socket_send_string(final_cat)
        sleep(wait_time / 1000.0)

      elif action_code == INST_ALL_SPEED:
        params1 = socket_read_binary_integer(1)
        state_speed = params1[1] / FACTOR_M
        state_joint_speed = 1000 * TO_RAD * state_speed

      elif action_code == INST_ALL_ACC:
        params1 = socket_read_binary_integer(1)
        state_acceleration = params1[1] / FACTOR_M
        state_joint_acceleration = 1000 * TO_RAD * state_acceleration

      end

      # Send completion message with action ID
      socket_send_int(action_id)

    end

  end
end


# Kickstart the driver
machina_ur_driver()